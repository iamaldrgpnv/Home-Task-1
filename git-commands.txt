#### Git — распределённая система контроля версий, которая даёт возможность разработчикам отслеживать изменения в файлах и работать совместно с другими разработчиками. 
#### Каждый раз, когда разработчик сохраняет состояние своего проекта в Git, система запоминает, как выглядит каждый файл в этот момент, и сохраняет ссылку на этот снимок.

#### GitHub — сервис онлайн-хостинга репозиториев.

#### Ссылки:
1. [Git Book](https://git-scm.com/book/ru/v2)
2. [Git How To](https://githowto.com/ru)

#### Первоначальная настройка (выполняется один раз)
Установить/изменить имя пользователя

    git config --global user.name "Ваше Имя"
    
Установить/изменить email пользователя

    git config --global user.email ваша@почта.com

Посмотреть значения

    git config --global user.name 
    git config --global user.email
    
--global (для пользователя) / --system (на всю систему) / без аргумента (на конкретный проект)

#### Клонирование существующего репозитория:

    git clone <url>, например https://github.com/profi-ifmo-web/git-commands.git
  
#### Создание гит репозитория (инициализация). Проект будет находиться под версионным контролем
1. Перейти в папку с проектом
       
       cd путь_к_папке
    
2. Выполнить команду
  
       git init

#### Проверить текущее состояние репозитория

    git status
    
#### Имена файлов / папок, которые не должны попадать под версионный контроль необходимо поместить в .gitignore файл    

#### Добавление файлов под версионный контроль / Индексация изменённых файлов 
        
        git add имя_файла - добавление одного файла
        git add имя_папки/ - добавление папки со всем ее содержимым
        git add * - добавит все новые  / измененные файлы
    
#### Фиксация изменений (сохранение состояния) В коммит попадут (будут сохранены) только файлы, которые были проиндексированы командой git add

        git commit -m "сообщение коммита"
        git commit -a "сообщение коммита" - аналогично командам (git add * + git commit -m "сообщение коммита")
        
#### Отправка изменений в удаленный репозиторий:

        git push
        git push <имя_удаленного_репозитория> <имя_ветки>, например git push origin main (или master)
        
#### Получение изменений из удалённого репозитория: 
Данную команду принято также выполнять каждый раз перед оправкой изменений в удаленный репозиторий 

        git pull

#### Добавление (удаление) удалённых репозиториев:

        git remote add <имя> <url>, например git remote add origin https://github.com/jjd-ifmo/project.git добавление
        git remote remove <имя>, например git remote remove origin удаление
        
##### Определения:
1. origin - имя (по умолчанию) удаленного репозитория (git присваивает данное имя удаленному серверу)  
2. main (или master) - имя (по умолчанию) ветки
3. HEAD - указатель на текущий коммит в текущей ветке

#### Скрытие (прятание) изменений (проект возвращается в состояние последнего коммита)

        git stash - скрытие (прятание)
        git stash list - выводит список всех прятаний
        git stash apply - вернуть последнее прятание
        git stash apply индекс, например  git stash apply stash@{1} - вернуть прятание по индексу
        git stash clear - удалить все прятанья
        
#### Просмотр истории коммитов

        git log
        
##### Перемещение по коммитам:
#### Checkout
#### Перейти к предыдущему коммиту (для просмотра):

        git checkout <хэш сумма коммита> - перейти к желаемому коммиту
        git checkout <имя ветки>, например git checkout main (или master)  - вернуться в прежнее состояние
        
#### Перейти к предыдущему коммиту в новой ветке (для продолжения работы в ней):

        git checkout -b <имя новой ветки> <хэш сумма коммита>

#### Reset
(https://blog.bullgare.com/2014/05/git-reset/)
        
#### Revert (отмена изменений, произведенных в прошлом отдельным коммитом):
git revert создает новый коммит, накладывающий обратные изменения

        git revert <хэш сумма коммита>

#### Ветвления:

        git branch - отображает список веток
        git branch <имя ветки> - создание ветки
        git checkout <имя_ветки> - переключение на ветку
        git push origin <имя ветки> - отправить ветку с изменениями в удаленный репозиторий
        git merge <имя другой ветки> - слияние веток
        git branch -d <имя ветки> - удаление ветки из локального репозитория
        git push origin --delete <имя ветки> - удаление ветки из удаленного репозитория


